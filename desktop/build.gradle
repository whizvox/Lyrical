apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "me.whizvox.lyrical.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

def RUNDIR = '.rundir'

task run(dependsOn: classes, type: JavaExec) {
  main = project.mainClassName
  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
  mkdir RUNDIR
  copy {
    from project.assetsDir
    into RUNDIR
    exclude {
      "*.xcf"
    }
  }
  workingDir = RUNDIR
  ignoreExitValue = true
}

task cleanRundir(type: Delete) {
  delete RUNDIR
}

task debug(dependsOn: classes, type: JavaExec) {
  main = project.mainClassName
  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
  workingDir = project.assetsDir
  ignoreExitValue = true
  debug = true
}

task dist(type: Jar) {
  from files(sourceSets.main.output.classesDir)
  from files(sourceSets.main.output.resourcesDir)
  from { configurations.compile.collect { zipTree(it) } }
  from files(project.assetsDir);

  manifest {
    attributes 'Main-Class': project.mainClassName
  }
  archivesBaseName = "Lyrical"
}
dist.dependsOn classes

eclipse {
  project {
    name = appName + "-desktop"
    linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
  }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
